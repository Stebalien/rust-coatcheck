var searchIndex = {};
searchIndex['coatcheck'] = {"items":[[0,"","coatcheck","# CoatCheck",null,null],[3,"Ticket","","A `Ticket` is an opaque data structure that can be used to claim the associated value.",null,null],[3,"ClaimError","","The error yielded when a claim fails.",null,null],[12,"kind","","The error kind.",0,null],[12,"ticket","","The ticket used in the failed claim.",0,null],[3,"AccessError","","The error yielded an access fails.",null,null],[12,"kind","","The error kind.",1,null],[3,"Tickets","","Iterator that checks-in values in exchange for tickets.",null,null],[3,"CoatCheck","","A data structure storing values indexed by tickets.",null,null],[4,"ErrorKind","","Coat check error types",null,null],[13,"WrongCoatCheck","","",2,null],[11,"fmt","","",3,{"inputs":[{"name":"ticket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"description","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"str"}}],[11,"description","","",0,{"inputs":[{"name":"claimerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"claimerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"claimerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"ticket"},{"name":"claimerror"}],"output":{"name":"ticket"}}],[11,"clone","","",1,{"inputs":[{"name":"accesserror"}],"output":{"name":"accesserror"}}],[11,"description","","",1,{"inputs":[{"name":"accesserror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"accesserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"accesserror"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Item","","",null,null],[11,"next","","",4,{"inputs":[{"name":"tickets"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"tickets"}],"output":{"name":"option"}}],[11,"new","","Constructs a new, empty `CoatCheck<T>`.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `CoatCheck<T>` with the specified capacity.",5,{"inputs":[{"name":"coatcheck"},{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the coat check can hold without reallocating.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"usize"}}],[11,"len","","The number of checked items.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be checked into the given\n`CoatCheck<T>`. The collection may reserve more space to avoid frequent reallocations.",5,{"inputs":[{"name":"coatcheck"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be check into the\ngiven `CoatCheck<T>`. Does nothing if the capacity is already sufficient.",5,{"inputs":[{"name":"coatcheck"},{"name":"usize"}],"output":null}],[11,"check","","Check a value in and get a `Ticket `in exchange.",5,{"inputs":[{"name":"coatcheck"},{"name":"v"}],"output":{"name":"ticket"}}],[11,"check_all","","Check all the items in an iterator and get tickets back.",5,{"inputs":[{"name":"coatcheck"},{"name":"i"}],"output":{"name":"tickets"}}],[11,"iter","","Iterate over the items in this `CoatCheck<V>`.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"iter"}}],[11,"iter_mut","","Mutably iterate over the items in this `CoatCheck<V>`.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"itermut"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the coat check (from\nstart to end). The coat check cannot be used after calling this.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"intoiter"}}],[11,"contains_ticket","","Check if a ticket belongs to this `CoatCheck<V>`.",5,{"inputs":[{"name":"coatcheck"},{"name":"ticket"}],"output":{"name":"bool"}}],[11,"is_empty","","Check if this `CoatCheck<V>` is empty.",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"bool"}}],[11,"claim","","Claim an item.",5,{"inputs":[{"name":"coatcheck"},{"name":"ticket"}],"output":{"name":"result"}}],[11,"get","","Get a reference to the value matching this ticket.",5,{"inputs":[{"name":"coatcheck"},{"name":"ticket"}],"output":{"name":"result"}}],[11,"get_mut","","Get a mutable reference to the value matching this ticket.",5,{"inputs":[{"name":"coatcheck"},{"name":"ticket"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"coatcheck"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"index","","",5,{"inputs":[{"name":"coatcheck"},{"name":"ticket"}],"output":{"name":"v"}}],[11,"index_mut","","",5,{"inputs":[{"name":"coatcheck"},{"name":"ticket"}],"output":{"name":"v"}}],[11,"default","","",5,{"inputs":[{"name":"coatcheck"}],"output":{"name":"self"}}]],"paths":[[3,"ClaimError"],[3,"AccessError"],[4,"ErrorKind"],[3,"Ticket"],[3,"Tickets"],[3,"CoatCheck"]]};
searchIndex['snowflake'] = {"items":[[0,"","snowflake","A crate for quickly generating unique IDs with guaranteed properties.",null,null],[3,"ProcessUniqueId","","Process unique IDs are guaranteed to be unique within the current process, for the lifetime of\nthe current process.",null,null],[11,"eq","","",0,{"inputs":[{"name":"processuniqueid"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"processuniqueid"},{"name":"processuniqueid"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"processuniqueid"}],"output":{"name":"processuniqueid"}}],[11,"new","","Create a new unique ID.",0,{"inputs":[{"name":"processuniqueid"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[{"name":"processuniqueid"}],"output":{"name":"self"}}]],"paths":[[3,"ProcessUniqueId"]]};
initSearch(searchIndex);
